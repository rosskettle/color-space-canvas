var ColorSpaceCanvas=function(e,t){return this instanceof ColorSpaceCanvas?("undefined"==typeof e&&(e={}),console.log("aaa",e.axes),this._props={colorSpace:e.colorSpace||"hsv",colorValues:e.colorValues||[1,1,1],axes:e.axes||"sv"},"undefined"!=typeof t?(this.element=t,"width"in e||(this._props.width=t.width),"height"in e||(this._props.height=t.height)):this.element=this._createElement(),this._fragmentShaderSource=this._whichShader(this._props.colorSpace,this._props.axes),this._gl=this._getContext(),this._initGL(this._quadVertices(),this._fragmentShaderSource),this._setSize(),this._setAxes(),this._setColorValues(),this.draw(),void 0):new ColorSpaceCanvas(userProps,t)};ColorSpaceCanvas.prototype={setProps:function(e){console.log(e);for(var t in e)if(t in this._props)switch(this._props[t]=e[t],t){case"colorValues":this._setColorValues();case"constant1":this._setColorValues();case"axes":this._setAxes();case"width":case"height":this._setSize()}this.draw()},draw:function(){var e=this._gl;e.clearColor(1,1,1,1),e.clear(e.COLOR_BUFFER_BIT),e.drawArrays(e.TRIANGLE_STRIP,0,4)},_whichShader:function(e,t){switch(this._props.colorSpace){case"hsv":if(1===t.length)return ColorSpaceCanvas.Shaders.HSVSource1D;if(2===t.length)return ColorSpaceCanvas.Shaders.HSVSource2D}},_shaderProgram:null,_uniforms:null,_attributes:null,_vertexBuffer:null,_setSize:function(){this.element.setAttribute("width",this._props.width),this.element.setAttribute("height",this._props.height),this._gl.viewport(0,0,this._props.width,this._props.height),this._gl.uniform2f(this._uniforms.uResolution,this._props.width,this._props.height),this._setResolution()},_setResolution:function(){this._gl.uniform2f(this._uniforms.uResolution,this._props.width,this._props.height)},_setAxes:function(){console.log("_setAxes",this._props.axes);var e;switch(this._props.axes){case"h":case"sv":e=0;break;case"s":case"hv":e=1;break;case"v":case"hs":e=2}this._gl.uniform1i(this._uniforms.uChannel,e)},_setColorValues:function(){this._gl.uniform3fv(this._uniforms.uColorValues,new Float32Array(this._props.colorValues))},_createElement:function(){var e=document.createElement("canvas");return e},_getContext:function(){return this.element.getContext("webgl")},_quadVertices:function(){return new Float32Array([1,1,-1,1,1,-1,-1,-1])},_initGL:function(e,t){this._shaderProgram=this._loadShaders(t),this._uniforms=this._getUniforms(this._shaderProgram),this._attributes=this._getAttributes(this._shaderProgram),this._vertexBuffer=this._loadVertexBuffer(e),this._bind()},_loadShaders:function(e){var t=this._gl,r=["attribute vec2 aXY;","void main(void) {","   gl_Position = vec4(aXY, 0, 1.0);","}"].join("\n"),s=t.createShader(t.VERTEX_SHADER);if(t.shaderSource(s,r),t.compileShader(s),!t.getShaderParameter(s,t.COMPILE_STATUS))throw new Error("Vertex Shader compilation failed.");var i=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(i,e),t.compileShader(i),!t.getShaderParameter(i,t.COMPILE_STATUS))throw new Error("Fragment Shader compilation failed.");var o=t.createProgram();if(t.attachShader(o,i),t.attachShader(o,s),t.linkProgram(o),!t.getProgramParameter(o,t.LINK_STATUS))throw new Error("Shaders failed to link");return t.useProgram(o),o},_getUniforms:function(e){return{uResolution:this._gl.getUniformLocation(e,"uResolution"),uChannel:this._gl.getUniformLocation(e,"uChannel"),uColorValues:this._gl.getUniformLocation(e,"uColorValues")}},_getAttributes:function(e){return{aXY:this._gl.getAttribLocation(e,"aXY")}},_loadVertexBuffer:function(e){var t=this._gl,r=t.createBuffer();return t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW),r},_bind:function(){var e=this._gl;e.enableVertexAttribArray(this._attributes.aXY),e.bindBuffer(e.ARRAY_BUFFER,this._vertexBuffer),e.vertexAttribPointer(this._attributes.aXY,2,e.FLOAT,!1,0,0)}},"undefined"!=typeof module&&(module.exports=ColorSpaceCanvas);
ColorSpaceCanvas.Shaders={HSVSource2D:["precision mediump float;","uniform vec2 uResolution;","uniform vec3 uColorValues;","uniform int uChannel;","const   int cH = 0;","const   int cS = 1;","const   int cV = 2;","void main(void) {","   float x = 1.0 / uResolution.x * gl_FragCoord.x;","   float y = 1.0 / uResolution.y * gl_FragCoord.y;","   float H;","   float S;","   float V;","   if (uChannel == cH) {","      H = uColorValues.x;","      S = x;","      V = y;","   } else if (uChannel == cS) {","      H = x;","      S = uColorValues.y;","      V = y;","   } else if (uChannel == cV) {","      H = x;","      S = y;","      V = uColorValues.z;","   }","   float sector = H * 6.0;","   if (sector == 6.0)","     sector = 0.0;","   float side = floor(sector);","   float f = sector - side;","   float var_1 = V * (1.0 - S);","   float var_2 = V * (1.0 - S * (sector - side));","   float var_3 = V * (1.0 - S * (1.0 - (sector - side)));","   vec3 rgb;","   if (side == 0.0) {","     rgb.r = V;","     rgb.g = var_3;","     rgb.b = var_1;","   } else if (side == 1.0) {","     rgb.r = var_2;","     rgb.g = V;","     rgb.b = var_1;","   } else if (side == 2.0) {","     rgb.r = var_1;","     rgb.g = V;","     rgb.b = var_3;","   } else if (side == 3.0) {","     rgb.r = var_1;","     rgb.g = var_2;","     rgb.b = V;","   } else if (side == 4.0) {","     rgb.r = var_3;","     rgb.g = var_1;","     rgb.b = V;","   } else {","     rgb.r = V;","     rgb.g = var_1;","     rgb.b = var_2;","   }","   gl_FragColor = vec4(rgb, 1.0);","}"].join("\n"),HSVSource1D:["precision mediump float;","uniform vec2 uResolution;","uniform vec3 uColorValues;","uniform int uChannel;","const   int cH = 0;","const   int cS = 1;","const   int cV = 2;","void main(void) {","   float x = 1.0 / uResolution.x * gl_FragCoord.x;","   float y = 1.0; // / uResolution.y * gl_FragCoord.y;","   float H;","   float S;","   float V;","   if (uChannel == cH) {","      H = x;","      S = 1.0;//uColorValues.y;","      V = 1.0;//uColorValues.z;","   } else if (uChannel == cS) {","      H = uColorValues.x;","      S = x;","      V = uColorValues.z;","   } else if (uChannel == cV) {","      H = uColorValues.x;","      S = uColorValues.y;","      V = x;","   }","   float sector = H * 6.0;","   if (sector == 6.0)","     sector = 0.0;","   float side = floor(sector);","   float f = sector - side;","   float var_1 = V * (1.0 - S);","   float var_2 = V * (1.0 - S * (sector - side));","   float var_3 = V * (1.0 - S * (1.0 - (sector - side)));","   vec3 rgb;","   if (side == 0.0) {","     rgb.r = V;","     rgb.g = var_3;","     rgb.b = var_1;","   } else if (side == 1.0) {","     rgb.r = var_2;","     rgb.g = V;","     rgb.b = var_1;","   } else if (side == 2.0) {","     rgb.r = var_1;","     rgb.g = V;","     rgb.b = var_3;","   } else if (side == 3.0) {","     rgb.r = var_1;","     rgb.g = var_2;","     rgb.b = V;","   } else if (side == 4.0) {","     rgb.r = var_3;","     rgb.g = var_1;","     rgb.b = V;","   } else {","     rgb.r = V;","     rgb.g = var_1;","     rgb.b = var_2;","   }","   gl_FragColor = vec4(rgb, 1.0);","}"].join("\n")},"undefined"!=typeof module&&(module.exports=ColorSpaceCanvas.Shaders);